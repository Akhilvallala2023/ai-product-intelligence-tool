import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

class Config:
    # OpenAI Configuration
    # Get your API key from: https://platform.openai.com/api-keys
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "your-openai-api-key-here")
    
    # Google Shopping API Configuration (SerpAPI)
    # Get your API key from: https://serpapi.com/
    GOOGLE_SHOPPING_API_KEY = os.getenv("GOOGLE_SHOPPING_API_KEY", "your-serpapi-key-here")
    
    # Application Configuration
    ENVIRONMENT = os.getenv("ENVIRONMENT", "development")
    DEBUG = os.getenv("DEBUG", "True").lower() == "true"
    
    # File Upload Configuration
    MAX_FILE_SIZE = int(os.getenv("MAX_FILE_SIZE", 10 * 1024 * 1024))  # 10MB
    ALLOWED_IMAGE_TYPES = ["image/jpeg", "image/jpg", "image/png", "image/webp", "image/gif"]
    
    # API Rate Limiting
    GOOGLE_SHOPPING_RATE_LIMIT = int(os.getenv("GOOGLE_SHOPPING_RATE_LIMIT", "100"))  # requests per hour
    
    # Search Configuration
    DEFAULT_SEARCH_LOCATION = os.getenv("DEFAULT_SEARCH_LOCATION", "Austin, Texas, United States")
    DEFAULT_SEARCH_LANGUAGE = os.getenv("DEFAULT_SEARCH_LANGUAGE", "en")
    DEFAULT_SEARCH_COUNTRY = os.getenv("DEFAULT_SEARCH_COUNTRY", "us")
    
    @classmethod
    def validate_config(cls):
        """Validate all required configuration values"""
        if not cls.OPENAI_API_KEY or cls.OPENAI_API_KEY == "your-openai-api-key-here":
            raise ValueError("OPENAI_API_KEY is required. Please set it in your environment variables or .env file")
        
        if not cls.GOOGLE_SHOPPING_API_KEY or cls.GOOGLE_SHOPPING_API_KEY == "your-serpapi-key-here":
            raise ValueError("GOOGLE_SHOPPING_API_KEY is required. Please set it in your environment variables or .env file")
        
        if cls.ENVIRONMENT not in ["development", "production", "testing"]:
            raise ValueError("ENVIRONMENT must be development, production, or testing")
        
        return True 